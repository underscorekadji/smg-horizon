#!/usr/bin/env node
/* eslint-disable no-use-before-define */

const symbols = require('log-symbols');

/**
 * Module dependencies.
 */
const debug = require('debug')('server:server');
const http = require('http');
const app = require('../src/app');
const CONFIG = require('../src/config');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(CONFIG.app.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  // eslint-disable-next-line no-shadow
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(symbols.error, `${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(symbols.error, `${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const host = server.address();
  const bind = typeof host === 'string' ? `pipe ${host}` : `port ${host.port}`;
  debug(`Listening on ${bind}`);

  console.log(
    symbols.success,
    `Express started on port ${host.port} in the ${CONFIG.app.environment} mode\n`
  );
}
